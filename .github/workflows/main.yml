# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # We'll run the tests on both Linux and OSX
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest] # , macos-latest] # Too slow :(

    # The type of runner that the job will run on
    runs-on: ${{matrix.platform}}

    outputs:
      dcl_quickjs_emscripten_s3_bucket_key: ${{ steps.publish_dcl_quickjs_emscripten.outputs.s3-bucket-key }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Docker (macOS)
        uses: docker-practice/actions-setup-docker@1.0.8
        if: matrix.platform == 'macos-latest'

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Yarn cache
        uses: actions/cache@v3
        with:
          path: "**/.yarn/cache"
          key: ${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --immutable
        env:
          YARN_ENABLE_SCRIPTS: 0

      - name: EMSDK cache
        uses: actions/cache@v3
        with:
          path: "emsdk-cache"
          key: ${{ hashFiles('scripts/emcc.sh') }}

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test-all

      - name: Test release with NodeJS/Typescript example
        run: yarn smoketest-node

      - name: Test release with create-react-app/Typescript example
        run: yarn smoketest-cra

      - name: Prettier
        run: yarn run prettier-check

      - name: publish packages
        uses: menduz/oddish-action@master
        id: publish_dcl_quickjs_emscripten
        with:
          registry-url: "https://registry.npmjs.org"
          access: public
          cwd: ./
          ## use action runId instead of current date to generate snapshot numbers
          deterministic-snapshot: true

          ## publish every package to s3
          s3-bucket: ${{ secrets.SDK_TEAM_S3_BUCKET }}
          s3-bucket-key-prefix: "@dcl/quickjs-emscripten/branch/${{ steps.myref.outputs.branch }}"

          ## inform gitlab after publishing to proceed with CDN propagation
          gitlab-token: ${{ secrets.GITLAB_TOKEN }}
          gitlab-pipeline-url: ${{ secrets.GITLAB_URL }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.SDK_TEAM_AWS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SDK_TEAM_AWS_SECRET }}

  notify_deployment:
    needs: [build]
    if: ${{ github.event.pull_request.number }}
    runs-on: ubuntu-latest
    name: Deployment Notification
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Test this pull request

      - name: Get the current branch name
        shell: bash
        run: node -e "console.log('::set-output name=branch::' +    ('${{github.head_ref}}' || '$GITHUB_REF'.replace('refs/heads/',''))    )"
        id: myref

      - name: Generate S3 URL
        id: url-generator
        run: |
          body=$(echo ${{ secrets.SDK_TEAM_S3_BASE_URL }})/${{ needs.build.outputs.dcl_quickjs_emscripten_s3_bucket_key }}
          echo ::set-output name=body::$body

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # Test this pull request
            - The `@dcl/quickjs-emscripten` package can be tested in scenes by running
               ```bash
               npm install "${{ steps.url-generator.outputs.body }}"
               ```
          edit-mode: replace
